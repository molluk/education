    for(int x = 0; x < 10; x++)
    {
        for(int y = 0; y < 9; y++)
        {
            int horizontal = 0, vertical = 0; 
            int x1, x2, x3, x4;
            int y1, y2, y3, y4;
            if(player1->player_field[x][y] >= 1 && player1->player_field[x][y] <= 4)
            {
                num = player1->player_field[x][y];
                //single_deck   ??
                if(num == 1) 
                {   
                    //check for the nearest ships
                    if(0 < (player1->player_field[x][y-1] || player1->player_field[x][y+1] //1string
                        || player1->player_field[x-1][y] || player1->player_field[x][y-1] || player1->player_field[x][y+1] //2string
                        || player1->player_field[x+1][y] || player1->player_field[x][y-1] || player1->player_field[x][y+1])) //3trsing
                        {
                            cout << "single deck" << endl;
                            error_message;
                        }
                }
                //two_deck ??
                else if(num == 1) 
                {
                    if(2 == (player1->player_field[x][y-1] || player1->player_field[x][y+1] || player1->player_field[x-1][y] || player1->player_field[x+1][y]))
                    {
                        if(player1->player_field[x][y-1] == 2){x1 = x; y1 = y-1; horizontal++;}         //horizontal
                        else if(player1->player_field[x][y+1] == 2){x1 = x; y1 = y+1; horizontal++;}    //horizontal
                        else if(player1->player_field[x+1][y] == 2){x1 = x+1; y1 = y; vertical++;}    //vertical
                        else if(player1->player_field[x-1][y] == 2){x1 = x-1; y1 = y; vertical++;}    //vertical
                    }
                    else if((player1->player_field[x][y-1] || player1->player_field[x][y+1] || 
                        player1->player_field[x-1][y] || player1->player_field[x+1][y]) != 2)
                        {
                            cout << "four deck" << endl;
                            error_message; 
                        }
                    //check for the nearest ships
                    if(horizontal == 1)
                    {
                        if(0 < (player1->player_field[x][y-1] && player1->player_field[x-1][y] && player1->player_field[x-1][y-1] && player1->player_field[x+1][y] && player1->player_field[x+1][y+1]   //test1
                            && player1->player_field[x1][y1-1] && player1->player_field[x1-1][y1] && player1->player_field[x1-1][y1-1] && player1->player_field[x1+1][y1] && player1->player_field[x1+1][y1+1] ||   
                            player1->player_field[x1][y1-1] && player1->player_field[x1-1][y1] && player1->player_field[x1-1][y1-1] && player1->player_field[x1+1][y1] && player1->player_field[x1+1][y1+1]       //test2
                            && player1->player_field[x][y-1] && player1->player_field[x-1][y1] && player1->player_field[x-1][y-1] && player1->player_field[x+1][y] && player1->player_field[x+1][y+1]))
                            {
                                cout << "four deck" << endl;
                                error_message;
                            }
                    }
                    else if(vertical == 1)
                    {
                        if(0 < (player1->player_field[x-1][y] && player1->player_field[x-1][y-1] && player1->player_field[x-1][y+1] && player1->player_field[x][y-1] && player1->player_field[x][y+1]   //test1
                            && player1->player_field[x1][y1-1] && player1->player_field[x1][y1+1] && player1->player_field[x1+1][y1] && player1->player_field[x1][y1-1] && player1->player_field[x1][y1+1] ||   
                            player1->player_field[x1-1][y1] && player1->player_field[x1-1][y1-1] && player1->player_field[x1-1][y1+1] && player1->player_field[x1][y1-1] && player1->player_field[x1][y1+1]       //test2
                            && player1->player_field[x][y-1] && player1->player_field[x][y1+1] && player1->player_field[x+1][y] && player1->player_field[x][y-1] && player1->player_field[x][y+1]))
                            {
                                cout << "four deck" << endl;
                                error_message;
                            }
                    }
                }
                //three_deck???
                else if(num == 3) 
                {
                    if(3 == (player1->player_field[x][y-1] && player1->player_field[x][y-2] ||player1->player_field[x][y+1] && player1->player_field[x][y+2] || 
                        player1->player_field[x-1][y] && player1->player_field[x-2][y] || player1->player_field[x+1][y] && player1->player_field[x+2][y]))
                    {
                        if((player1->player_field[x][y-1] && player1->player_field[x][y-2]) == 3){x1 = x; y1 = y-1; y2 = y-2; horizontal++;}         //horizontal
                        else if((player1->player_field[x][y+1] && player1->player_field[x][y+2]) == 3){x1 = x; y1 = y+1; y1 = y+2; horizontal++;}    //horizontal
                        else if((player1->player_field[x+1][y] && player1->player_field[x+2][y]) == 3){x1 = x+1; x2 = x+2; y1 = y; vertical++;}    //vertical
                        else if((player1->player_field[x-1][y] && player1->player_field[x-2][y]) == 3){x1 = x-1; x2 = x-2; y1 = y; vertical++;}    //vertical
                    }
                    else if((player1->player_field[x][y-1] && player1->player_field[x][y-2] || player1->player_field[x][y+1] && player1->player_field[x][y+2] || 
                    player1->player_field[x-1][y] && player1->player_field[x-2][y] || player1->player_field[x+1][y] && player1->player_field[x+2][y]) != 3)
                        {
                            cout << "four deck" << endl;
                            error_message; 
                        }
                    //check for the nearest ships??
                    if(horizontal == 1)
                    {
                        if(0 < (player1->player_field[x-1][y] && player1->player_field[x-1][y+1] && player1->player_field[x-1][y-1] && player1->player_field[x+1][y] 
                            && player1->player_field[x1-1][y] && player1->player_field[x1+1][y] && player1->player_field[x2+1][y] && player1->player_field[x2+1][y+1] && player1->player_field[x2+1][y-1] 
                            && player1->player_field[x2-1][y] && player1->player_field[x2+1][y]))
                            {
                                cout << "four deck" << endl;
                                error_message;
                            }
                    }
                    else if(vertical == 1)
                    {
                        if(0 < (player1->player_field[x][y-1] && player1->player_field[x][y-2] && player1->player_field[x-1][y] && player1->player_field[x-2][y] && player1->player_field[x-1][y-1] && player1->player_field[x-2][y-2] //test1
                            && player1->player_field[x+1][y] && player1->player_field[x+2][y] && player1->player_field[x+1][y+1] &&  player1->player_field[x+2][y+2]   
                            && player1->player_field[x1][y1-1] && player1->player_field[x1][y1-2] && player1->player_field[x1-1][y1] && player1->player_field[x1-2][y1]  && player1->player_field[x1-1][y1-1] && player1->player_field[x1-2][y1-2] 
                            && player1->player_field[x1+1][y1] && player1->player_field[x1+2][y1] && player1->player_field[x1+1][y1+1] && player1->player_field[x1+2][y1+2] ||   
                            player1->player_field[x1][y1-1] && player1->player_field[x1][y1-2] && player1->player_field[x1-1][y1] && player1->player_field[x1-1][y1] && player1->player_field[x1-1][y1-1] && player1->player_field[x1-2][y1-2] //test2
                            && player1->player_field[x1+1][y1] && player1->player_field[x1+2][y1] && player1->player_field[x1+1][y1+1] && player1->player_field[x1+2][y1+2]        
                            && player1->player_field[x][y-1] && player1->player_field[x1][y1-2] && player1->player_field[x-1][y1] && player1->player_field[x1-2][y1] && player1->player_field[x-1][y-1] && player1->player_field[x1-2][y1-2] 
                            && player1->player_field[x+1][y] && player1->player_field[x1+2][y1] && player1->player_field[x+1][y+1] && player1->player_field[x1+2][y1+2] ))
                            {
                                cout << "four deck" << endl;
                                error_message;
                            }
                    }
                }
                //four_deck
                
            }
        }
    }
